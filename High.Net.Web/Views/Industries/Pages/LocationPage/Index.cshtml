@using EPiServer.Core
@using High.Net.Core
@using High.Net.Models.Shared.Pages
@model PageViewModel<LocationPage>
@{
    var client = ImageVault.Client.ClientFactory.GetSdkClient();
}
@section SiteHeader{
    <style>
        .map-container {
            height: 600px;
            width: 100%;
            overflow: hidden;
        }

        #map-canvas {
            border: 1px solid #000000;
            height: 600px;
        }

        #legend {
            font-size: 12px;
            line-height: 34px;
            list-style: outside none none;
            margin: 0;
            padding: 0;
        }

            #legend li {
                font-weight: bold;
                margin-right: 20px;
            }

                #legend li span {
                    display: block;
                    float: left;
                    height: 34px;
                    margin-right: 4px;
                    overflow: hidden;
                    width: 10px;
                }

                #legend li img {
                    height: 17px;
                    vertical-align: middle;
                }

        .content {
            font-size: 12px;
            width: 250px;
            color: #000000;
        }

            .content a {
                text-decoration: none;
            }

                .content a:hover {
                    text-decoration: underline;
                }

            .content .title {
                font-size: 14px;
            }

            .content .url {
                padding-top: 8px;
            }
    </style>
}

<div class="container">
    @Html.Partial("~/Views/Industries/Shared/Banner.cshtml")

    <div class="center-white">
        @Html.PropertyFor(m => m.CurrentPage.MainContentArea, new { CssClass = "row", tag = Global.ContentAreaTags.FullWidth, Tags = new[] { Global.ContentAreaTags.FullWidth, Global.ContentAreaTags.TwoThirdsWidth, Global.ContentAreaTags.HalfWidth, Global.ContentAreaTags.OneThirdWidth, Global.ContentAreaTags.OneFourthWidth } })
        <div class="clearfix"></div>
    </div>
    <div class="spacer"></div>
    <div class="spacer"></div>
    @if (Model.CurrentPage.LocationData != null)
    {
        var locationData = client.Load<ImageVault.Common.Data.Media>(Model.CurrentPage.LocationData.Id).ToList();
        if (locationData.Count > 0)
        {
            <input type="hidden" id="locationData" value="@Url.ContentUrl(locationData.FirstOrDefault().Url)" />
            <div class="container map-container">
                <div class="row">
                    <div class="col-md-12">
                        <div id="map-canvas"></div>
                    </div>
                    @*<div class="col-md-3">
                            <ul id="legend">
                                <li><h5><strong>Legend</strong></h5></li>
                                <li><span><img src="~/Static/global/location-images/red.png" alt="red"></span>Corporate Office</li>
                                <li><span><img src="~/Static/global/location-images/green.png" alt="green"></span>Corporate Ctr</li>
                                <li><span><img src="~/Static/global/location-images/yellow.png" alt="yellow"></span>Shopping Ctr</li>
                                <li><span><img src="~/Static/global/location-images/purple.png" alt="purple"></span>Hotel</li>
                                <li><span><img src="~/Static/global/location-images/orange.png" alt="orange"></span>Self Storage</li>
                                <li><span><img src="~/Static/global/location-images/blue.png" alt="blue"></span>Apartment Community</li>
                                <li><span><img src="~/Static/global/location-images/brown.png" alt="bown"></span>Manufactured Home Community</li>
                            </ul>
                        </div>*@
                </div>
            </div>
        }
    }
    <div class="spacer"></div>
</div>
@section SiteFooter{
    @Scripts.Render("~/bundles/jquery-csv-js")
    @Scripts.Render("~/bundles/google-map-js")
    @Scripts.Render("~/bundles/markerclusterer-js")
    <script>
        $(document).ready(function () {
            function makeInfoWindowEvent(map, infowindow, marker) {
                return function () {
                    infowindow.open(map, marker);
                };
            }
            var $locationUrl = $('#locationData').val();

            function initialize() {

                var center = new google.maps.LatLng(35.075597, -96.702108);

                var map = new google.maps.Map(document.getElementById('map-canvas'), {
                    zoom: 4,
                    center: center,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                });

                if ($locationUrl) {
                    $.get($locationUrl, function (data) {
                        var dataClean = data.replace(/,,/g, ",&nbsp;,");
                        var locations = $.csv()(dataClean);
                        var coords = new Array();
                        var container = new google.maps.LatLngBounds();
                        var markers = new Array();
                        var infowindows = new Array();
                        for (i = 1; i < locations.length; i++) {
                            var j = i - 1; // 0-based iterator
                            var latlng = new google.maps.LatLng(locations[i][10], locations[i][11])

                            var image = new google.maps.MarkerImage(
                                '/Static/global/location-images/' + locations[i][0] + '.png',
                                  new google.maps.Size(20, 34),
                                  new google.maps.Point(0, 0),
                                  new google.maps.Point(10, 33)
                            );
                            var marker = new google.maps.Marker({
                                position: latlng,
                                icon: image,
                                title: locations[i][1] + '\n' + locations[i][2]
                            });
                            markers.push(marker);
                            var end = escape(locations[i][3] + ', ' + locations[i][4] + ', ' + locations[i][5] + ' ' + locations[i][6]); //Name with address formation
                            contentString = '<div class="content">' +
                                '<strong class="title">' + locations[i][1] + '</strong><br /><br />' +
                                '<span class="address">' + locations[i][3] + '</span><br />' +
                                '<span class="city-state-zip">' + locations[i][4] + ', ' + locations[i][5] + ' ' + locations[i][6] + '</span><br />' +
                                '<span class="phone">' + locations[i][8] + '</span><br />' +
                                '<a href="' + locations[i][7] + '" class="url" target="_blank">' + locations[i][7] + '</a><br /><br />' +
                                '<a href="http://maps.google.com/maps?&daddr=' + end + '" class="directions" target="_blank">Get Directions &raquo;</a><br />' +
                                '<p class="description">' + locations[i][9] + '</p>'
                            '</div>';
                            infowindows[j] = new google.maps.InfoWindow({
                                content: contentString
                            });
                        }
                        if (markers) {
                            for (i in markers) {
                                google.maps.event.addListener(markers[i], 'click', makeInfoWindowEvent(map, infowindows[i], markers[i]));
                            }
                        }
                        var markercluster = new MarkerClusterer(map, markers);
                    })
                }
            }
            google.maps.event.addDomListener(window, 'load', initialize);
        })
    </script>
}