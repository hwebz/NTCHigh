@using High.Net.Core
@using High.Net.Models
@using High.Net.Core.Helpers
@using High.Net.Models.HighNet.Pages

@model PageViewModel<ReusableComponentPage>
@*@section SiteHeader{
        @Styles.Render("~/bundles/fontawesome-css")
    }*@

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">

<div class="spacer"></div>
@Html.PropertyFor(x => x.CurrentPage.ContentArea, new { CssClass = "row", tag = Global.ContentAreaTags.FullWidth, Tags = new[] { Global.ContentAreaTags.FullWidth, Global.ContentAreaTags.ThreeFourthWidth, Global.ContentAreaTags.TwoThirdsWidth, Global.ContentAreaTags.HalfWidth, Global.ContentAreaTags.OneThirdWidth, Global.ContentAreaTags.OneFourthWidth, Global.ContentAreaTags.OneFifthWidth, Global.ContentAreaTags.OneTwelfthWidth } })

@section SiteFooter{
    <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-58b7fb9b9cbdb128"></script>
    <script>
        $(document).ready(function () {
            $('.csslayeredimagecontentblock, .googlemapblock').parent().addClass('container-fluid');
        });
    </script>
   

    @if (Model.CurrentPage.IsGoogleMapIntegrated)
    {
        <script src="~/Static/lib/location-js/jquery.csv.min.js"></script>
        <script type="text/javascript" src="//maps.google.com/maps/api/js?sensor=false&key=@SettingsHelper.GetSetting("googleMapApiKey")"></script>
        <script src="~/Static/lib/location-js/markerclusterer.js"></script>
        <script>
            $(document).ready(function () {

                var $locationUrl = $('#locationData').val();

                function makeInfoWindowEvent(map, infowindow, marker) {
                    return function () {
                        infowindow.open(map, marker);
                    };
                }

                function initialize(legend) {

                    var center = new google.maps.LatLng(35.075597, -96.702108);

                    var map = new google.maps.Map(document.getElementById('map-canvas'), {
                        zoom: 4,
                        center: center,
                        mapTypeId: google.maps.MapTypeId.ROADMAP
                    });

                    if ($locationUrl) {
                        $.get($locationUrl, function (data) {
                            var dataClean = data.replace(/,,/g, ",&nbsp;,");
                            var locations = $.csv()(dataClean);
                            var coords = new Array();
                            var container = new google.maps.LatLngBounds();
                            var markers = new Array();
                            var infowindows = new Array();
                            var header = locations[0];
                            locations = $.grep(locations, function (a) {
                                if (legend == "") {
                                    return a;
                                }
                                else if (a[2] == legend) {
                                    return a;
                                }
                            });
                            if (legend != "") {
                                locations.splice(0, 0, header);
                            }

                            for (i = 1; i < locations.length; i++) {
                                var j = i - 1; // 0-based iterator
                                var latlng = new google.maps.LatLng(locations[i][10], locations[i][11])

                                var image = new google.maps.MarkerImage(
                                    '/Static/highnet/google-map/location-images/' + ($.trim(locations[i][0])).replace(" ", "_") + '.png',
                                      new google.maps.Size(23, 23),
                                      new google.maps.Point(0, 0),
                                      new google.maps.Point(10, 33)
                                );
                                var marker = new google.maps.Marker({
                                    position: latlng,
                                    icon: image,
                                    title: locations[i][1] + '\n' + locations[i][2]
                                });
                                markers.push(marker);
                                var end = escape(locations[i][3] + ', ' + locations[i][4] + ', ' + locations[i][5] + ' ' + locations[i][6]); //Name with address formation
                                contentString = '<div class="content">' +
                                    '<strong class="title">' + locations[i][1] + '</strong><br /><br />' +
                                    '<span class="address">' + locations[i][3] + '</span><br />' +
                                    '<span class="city-state-zip">' + locations[i][4] + ', ' + locations[i][5] + ' ' + locations[i][6] + '</span><br />' +
                                    '<span class="phone">' + locations[i][8] + '</span><br />' +
                                    '<a href="' + locations[i][7] + '" class="url" target="_blank">' + locations[i][7] + '</a><br /><br />' +
                                    '<a href="http://maps.google.com/maps?&daddr=' + end + '" class="directions" target="_blank">Get Directions &raquo;</a><br />' +
                                    '<p class="description">' + locations[i][9] + '</p>'
                                '</div>';
                                infowindows[j] = new google.maps.InfoWindow({
                                    content: contentString
                                });
                            }
                            if (markers) {
                                for (i in markers) {
                                    google.maps.event.addListener(markers[i], 'click', makeInfoWindowEvent(map, infowindows[i], markers[i]));
                                }
                            }
                            var markercluster = new MarkerClusterer(map, markers,
                                { imagePath: '../../Static/highnet/images/m/m' },
                                { gridSize: 80 });

                            markercluster.setCalculator(function (markers, numStyles) {
                                var index = 0;
                                var title = "";
                                var count = markers.length.toString();

                                var dv = count;
                                while (dv !== 0) {
                                    dv = parseInt(dv / 10, 10);
                                    index++;
                                }

                                index = Math.min(index, numStyles);
                                return {
                                    text: "",
                                    index: index,
                                    title: count
                                };
                            });
                        })
                    }
                }

                google.maps.event.addDomListener(window, 'load', initialize(""));

                $('#filter-legend').change(function () {
                    var legend = this.value;
                    initialize(legend);
                });

            })
        </script>
    }
}